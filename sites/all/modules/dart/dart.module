<?php

/**
 * The doublclick URL.
 */
define('DART_URL', 'http://ad.doubleclick.net');

/**
 * The maximum number of key|value pair fields to show on forms by defaut.
 */
define('DART_MAX_KEY_VALS', 10);

/**
 * Implements hook_help().
 */
function dart_help($path, $arg) {
  switch ($path) {
    case 'admin/help#dart':
      $output = '<p>' . t('The DART module allows you to integrate Doubleclick ad tags onto your site.') . '</p>';
      $output .= '<p>' . t('This module provides you with a general settings form as well as the ability to create a tag (with all its associated data) in the database. You can then add a simple bit of php to your tpl.php file(s) within your theme to indicate where specific tags should be displayed.') . '</p>';
      $output .= '<p>' . t('In addition, you can tell this module about specific javascript variables that exist on your pages in order to include them in your ad tags. For example, you can include a variable called "channel" with a value of "sports".') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function dart_permission() {
  return array(
    'administer DART tags' => array(
      'title' => t('administer DART tags'),
      'description' => t('Users can create, edit and delete DART tags as well as configure how and when DART tags should be displayed.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dart_theme() {
  return array(
    'dart_key_vals_form' => array(
      'render element' => 'form',
      'file' => 'plugins/export_ui/dart_ctools_export_ui.inc',
    ),
    'dart_global_defaults_form' => array(
      'render element' => 'form',
      'file' => 'dart.admin.inc',
    ),
    'dart_tag' => array(
      'variables' => array('tag' => NULL),
      'template' => 'theme/dart_tag',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dart_menu() {
  $items = array();

  $items['admin/structure/dart_tags/settings'] = array(
    'title' => 'Global DART Settings',
    'type' => MENU_LOCAL_TASK,
    'description' => "Configure your site-wide DART settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dart_admin_settings'),
    'access arguments' => array('administer DART tags'),
    'file' => 'dart.admin.inc',
    'weight' => 50,
  );
  $items['admin/structure/dart_tags/test_page'] = array(
    'title' => 'DART Test Page',
    'type' => MENU_LOCAL_TASK,
    'description' => "View all your DART tags",
    'page callback' => 'dart_test_page',
    'access arguments' => array('administer DART tags'),
    'weight' => 55,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function dart_block_info() {
  $tags = _dart_block_tags();
  $blocks = array();
  foreach ($tags as $tag) {
    $blocks['dart-tag-' . $tag->machinename]['info'] = t('DART tag: !tagname', array('!tagname' => $tag->name));
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function dart_block_configure($delta) { }

/**
 * Implements hook_block_save().
 */
function dart_block_save($delta, $edit) { }

/**
 * Implements hook_block_view().
 */
function dart_block_view($delta) {
  $machinename = str_replace('dart-tag-', '', $delta);
  $block['content'] = dart_tag($machinename);
  return $block;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function dart_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_context_plugins().
 */
function dart_context_plugins() {
  $plugins = array();
  $plugins['dart_context_reaction_tags'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'dart') . '/plugins/contexts',
      'file' => 'dart_context_reaction_tags.inc',
      'class' => 'dart_context_reaction_tags',
      'parent' => 'context_reaction',
    ),
  );
  $plugins['dart_context_reaction_settings'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'dart') . '/plugins/contexts',
      'file' => 'dart_context_reaction_settings.inc',
      'class' => 'dart_context_reaction_settings',
      'parent' => 'context_reaction',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function dart_context_registry() {
  return array(
    'reactions' => array(
      'dart_tags' => array(
        'title' => t('DART tags'),
        'plugin' => 'dart_context_reaction_tags',
      ),
      'dart_settings' => array(
        'title' => t('DART settings'),
        'plugin' => 'dart_context_reaction_settings',
      ),
    ),
  );
}

/**
 * Wrapper function for outputting a themed dart tag.
 */
function dart_tag($machinename) {
  $output = '';

  // Make sure this is a real tag.
  if (!$tag = dart_tag_load($machinename)) {
    drupal_set_message(t('%machinename is not a valid DART tag.', array('%machinename' => $machinename)), 'error');
    return;
  }

  if (module_exists('context')) {
    // Hide the tag based on the current context.
    if ($plugin = context_get_plugin('reaction', 'dart_tags')) {
      $plugin->execute($tag);
    }
    // Override the tag's settings based on the current context.
    if ($plugin = context_get_plugin('reaction', 'dart_settings')) {
      $plugin->execute($tag);
    }
  }

  if ($tag->active) {
    // Build the tag based on its display options.
    // $output = dart_tag_build($tag);
    $output = theme('dart_tag', array('tag' => $tag));
  }

  return $output;
}

/**
 * Return the adtag object matching a DART Tag ID.
 *
 * @param $machinename
 *   The DART tag's unique identifier or empty.
 *
 * @return
 *   If a machinename is provided, the dart tag object with all of its metadata,
 *   if it exists, NULL otherwise. If machinename is empty, a list of all dart
 *   tags.
 */
function dart_tag_load($machinename = '') {
  ctools_include('export');

  // Grab an array of all DART tags or the specificed DART tag.
  if (empty($machinename)) {
    $tags = ctools_export_load_object('dart_tags');
  }
  else {
    $tags = ctools_export_load_object('dart_tags', 'names', array($machinename));
  }

  // Build up the tag objects
  dart_tag_prepare($tags);
  return empty($machinename) ? $tags : array_shift($tags);
}

/**
 * Modify just-loaded DART tags to prepare it for use.
 */
function dart_tag_prepare(&$tags) {
  // Unserialize the settings array.
  foreach ($tags as &$tag) {
    if (is_string($tag->settings)) {
      $tag->settings = unserialize($tag->settings);
    }

    // Build an exhaustive key_vals array to use for display purposes that
    // incorporates global, special & tag-specific key|value pairs.
    $tag->key_vals = array();
    $pos_sz_key_vals = array(array(
        'key' => 'pos',
        'val' => $tag->pos,
        'eval' => FALSE,
      ), array(
        'key' => 'sz',
        'val' => $tag->sz,
        'eval' => FALSE,
      ));
    $global_key_vals = variable_get('dart_key_vals', array());
    $tag_key_vals = isset($tag->settings['key_vals']) ? $tag->settings['key_vals'] : array();
    $contrib_key_vals = module_invoke_all('dart_key_vals', $tag);
    $special_key_vals  = _dart_get_special_key_vals();

    // Merge these key_value arrays together. $special_key_vals must be last.
    $key_vals = array_merge(
      $pos_sz_key_vals,
      $global_key_vals,
      $tag_key_vals,
      $contrib_key_vals,
      $special_key_vals
    );

    // Use an MD5 hash trick to ensure no duplicate key|value pairs exist.
    $unique_key_vals = array();
    foreach ($key_vals as $pair) {
      $unique_key_vals[md5(serialize($pair))] = $pair;
    }
    $key_vals = array_values($unique_key_vals);

    foreach ($key_vals as $pair) {
      _dart_add_key_val($tag, $pair['key'], $pair['val'], isset($pair['eval']) ? $pair['eval'] : FALSE);
    }

    // Set the prefix.site/zone and slug for this tag.
    $variables = array('prefix', 'site', 'zone', 'slug', 'network_id');
    foreach ($variables as $var) {
      $tag->{$var} = empty($tag->settings['overrides'][$var]) ? variable_get('dart_global_' . $var, '') : $tag->settings['overrides'][$var];
    }
    $tag->slug = ($tag->slug != '<none>' ? $tag->slug : '');

    // Give other modules the opportunity to add information to this tag.
    drupal_alter('dart_tag', $tag);

    // Build data for the noscript tag.
    $tag->noscript = dart_tag_prepare_noscript($tag);

    // Check if tags should be displayed using test values for prefix.site/zone().
    dart_tag_adtest($tag);
  }
}

/**
 * Build data for the noscript tag.
 */
function dart_tag_prepare_noscript($tag) {
  static $tile = NULL;
  static $ord = 0;

  // Set an initial value for tile. We subtract 1 since we immediately add 1.
  $tile = is_null($tile) ? variable_get('dart_special_tile_init', '0') -1 : $tile;

  // Add the special key|value pairs to the noscript tag.
  $special_key_vals  = _dart_get_special_key_vals();
  foreach ($special_key_vals as $key_val) {
    switch ($key_val['key']) {
      case 'tile':
        $tile++;
        break;
      case 'ord':
        $ord = $ord == 0 ? rand(1000000000, 9999999999) . '?' : $ord;
        break;
    }
  }

  // Begin building the src for the noscript tag.
  $src  = DART_URL . ($tag->network_id != '' ? '/' . $tag->network_id : '') . '/ad/' . $tag->prefix . '.' . $tag->site . '/' . $tag->zone . ';';

  // Add global & tag-specific key|value pairs.
  foreach ($tag->key_vals as $key => $vals) {
    foreach ($vals as $val) {
      // Only add key|value pairs that do not require javacript and are not
      // "special" key|value pairs.
      if (!$val['eval'] && !in_array($key, $special_key_vals)) {
        $src .= $key . '=' . $val['val'] . ';';
      }
    }
  }

  // Now add the "special" key|value pairs.
  $src .= $tile ? 'tile=' . $tile . ';' : '';
  $src .= $ord ? 'ord=' . $ord : '';

  return array(
    'src' => $src,
    'href' => str_ireplace('/ad/', '/jump/', $src),
  );
}


/**
 * Change the current active/inactive status for the given tag.
 */
function dart_tag_set_status($tag, $status) {
  db_update('dart_tags')
    ->fields(array(
      'active' => $status,
    ))
    ->condition('machinename', $tag->machinename)
    ->execute();
}

/**
 * Implentation of template_preprocess_page().
 */
function dart_preprocess_page(&$variables) {
  // Inject any user-defined javascript.
  $inline_js = variable_get('dart_js', '') . "\n";

  // Add page key|value pairs to the drupal.settings.dart javascript variable.
  $key_vals = _dart_get_page_key_vals();
  foreach ($key_vals as $key => $val) {
    $inline_js .= 'var ' . $key . ' = ' . $val . ';' . "\n";
  }

  // Add settings for loading ads last.
  if (variable_get('dart_load_last', '0')) {
    if ($path = libraries_get_path('writecapture')) {
      drupal_add_js($path . '/jquery.writeCapture.js');
    }
    $inline_js .= 'Drupal.DART.settings.writeTags = false;' . "\n";
    $inline_js .= 'Drupal.DART.settings.loadLastTags = {};' . "\n";
  }

  // Include the inline js & dart.js file. Dart.js must be included first
  // because the inline_js can reference variables defined in dart.js.
  drupal_add_js(drupal_get_path('module', 'dart') . '/dart.js');
  drupal_add_js(trim($inline_js, "\n"), array('type' => 'inline', 'scope' => 'header'));

  // Regenerate scripts variable to incorporate newly added scripts.
  $variables['scripts'] = drupal_get_js();
}

/**
 * Menu callback; Displays all DART tags on a single page for testing purposes.
 */
function dart_test_page() {
  $tags = dart_tag_load();

  $content = array();
  $content['test_page_form'] = drupal_get_form('dart_test_page_form');
  $content['ads'] = array();

  foreach ($tags as $tag) {
    $tag->mode = 'test';
    $tag->site = isset($_GET['site']) ? $_GET['site'] : $tag->site;
    $tag->zone = isset($_GET['zone']) ? $_GET['zone'] : $tag->zone;

    $content['ads'][$tag->machinename] = array(
      '#type'   => 'markup',
      '#prefix' => '<div class="ad_wrap">',
      '#suffix' => '</div>',
      'title'   => array(
        '#type'   => 'markup',
        '#prefix' => '<h2>',
        '#suffix' => '</h2>',
        '#markup' => $tag->name,
      ),
      'tag'     => array(
        '#type'   => 'markup',
        '#theme'  => 'dart_tag',
        '#tag'    => $tag,
      ),
      'krumo'   => array(
        '#type'   => 'markup',
        '#markup' => module_exists('devel') ? kpr($tag, TRUE) : '',
      ),
      '#sorted' => TRUE,
    );
  }

  return $content;
}

/**
 * Form function for the override settings at the top of the test page.
 */
function dart_test_page_form($form, &$form_state, $edit = array()) {
  $form['#method'] = 'get';
  $form['site'] = array(
    '#type' => 'textfield',
    '#title' => t('Site'),
    '#default_value' => isset($_GET['site']) ? $_GET['site'] : '',
  );
  $form['zone'] = array(
    '#type' => 'textfield',
    '#title' => t('Zone'),
    '#default_value' => isset($_GET['zone']) ? $_GET['zone'] : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Override'),
  );

  return $form;
}

/**
 * Alters tags to use test prefix.site.zone if the adtest query string.
 */
function dart_tag_adtest(&$tag) {
  // If there is an "adtest" query string, show test ad tags instead.
  if (isset($_GET['adtest']) && $_GET['adtest'] == 'true') {
    $tag->prefix = $_GET['prefix'] ? $_GET['prefix'] : variable_get('dart_test_prefix', '');
    $tag->site = $_GET['site'] ? $_GET['site'] : variable_get('dart_test_site', '');
    $tag->zone = $_GET['zone'] ? $_GET['zone'] : variable_get('dart_test_zone', '');
  }
}

/**
 * Helper function defines the structure of the tag settings array.
 */
function _dart_tag_settings_data_structure() {
  $structure = array(
    'overrides' => array('site', 'zone', 'slug'),
    'options' => array('scriptless', 'method'),
    'key_vals' => array(),
  );

  drupal_alter('dart_tag_settings_data_structure', $structure);

  return $structure;
}

/**
 * Helper function that returns an array of all tags that will
 * be rendered as blocks.
 */
function _dart_block_tags() {
  $block_tags = array();
  $tags = dart_tag_load();

  foreach ($tags as $tag) {
    if ($tag->block) {
      $block_tags[] = $tag;
    }
  }

  return $block_tags;
}

/**
 * Helper function to add a key|value pair to a tag object.
 */
function _dart_add_key_val(&$tag, $key, $val = NULL, $eval = FALSE) {
  if (!empty($val)) {
    $tag->key_vals[$key][] = array(
      'val' => $val,
      'eval' => $eval,
    );
  }
}

/**
 * Helper function to buil a key|value pair array for special_key_vals.
 */
function _dart_get_special_key_vals() {
  $key_vals = array();

  $special_key_vals = variable_get('dart_special_key_vals', array());
  foreach ($special_key_vals as $key => $val) {
    if (!empty($val)) {
      switch ($key) {
        case 'ord':
          $key_vals[] = array(
            'key' => $key,
            'val' => 'ord',
            'eval' => TRUE,
          );
          break;
        case 'tile':
          $key_vals[] = array(
            'key' => $key,
            'val' => 'tile++',
            'eval' => TRUE,
          );
          break;
      }
    }
  }
  return $key_vals;
}

/**
 * Returns an array of js variables to be included at the top of every page.
 */
function _dart_get_page_key_vals() {
  //$key_vals = array('dart' => array());
  $key_vals = array();

  // Set the dart url
  $key_vals['dart_url'] = '"' . DART_URL . '"';

  // Setup page-wide Dart key|value pairs as varibales.
  foreach (_dart_get_special_key_vals() as $key_val) {
    if (!empty($key_val['val'])) {
      switch ($key_val['key']) {
        case 'ord':
          $key_vals['ord'] = "1000000000 + Math.floor(Math.random() * 900000000)";
          break;
        case 'tile':
          $key_vals['tile'] = variable_get('dart_special_tile_init', '0');
          break;
      }
    }

  }
  return $key_vals;
}

/**
 * Template preprocess function for dart tags.
 */
function template_preprocess_dart_tag(&$variables) {
  $tag = $variables['tag'];

  $variables['attributes_array']['class'] = 'dart-tag dart-name-' . $tag->machinename;
  $variables['json_tag'] = drupal_json_encode($tag);
  $variables['load_last']   = variable_get('dart_load_last', '0');

  if (isset($tag->mode) && $tag->mode == 'test') {
    $variables['show_script_tag'] = TRUE;
    $variables['show_noscript_tag'] = TRUE;
  }
  else {
    $variables['show_script_tag'] = !$tag->settings['options']['scriptless'];
    $variables['show_noscript_tag'] = variable_get('dart_noscript', 1);
  }

  $variables['static_tag'] = l(theme('image', array('path' => $tag->noscript['src'])), $tag->noscript['href'], array('html' => TRUE));
  $variables['noscript_tag'] = $variables['show_noscript_tag'] ? '<noscript>' . $variables['static_tag'] . '</noscript>' : '';

  $variables['tag'] = $tag;
}
